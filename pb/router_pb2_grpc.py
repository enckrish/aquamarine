# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb import router_pb2 as pb_dot_router__pb2


class RouterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init_Type0 = channel.unary_unary(
            '/Router/init_Type0',
            request_serializer=pb_dot_router__pb2.InitRequest_Type0.SerializeToString,
            response_deserializer=pb_dot_router__pb2.InitResponse_Type0.FromString,
        )
        self.routeLog_Type0 = channel.stream_stream(
            '/Router/routeLog_Type0',
            request_serializer=pb_dot_router__pb2.AnalyzerRequest_Type0.SerializeToString,
            response_deserializer=pb_dot_router__pb2.AnalyzerResponse.FromString,
        )


class RouterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init_Type0(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def routeLog_Type0(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'init_Type0': grpc.unary_unary_rpc_method_handler(
            servicer.init_Type0,
            request_deserializer=pb_dot_router__pb2.InitRequest_Type0.FromString,
            response_serializer=pb_dot_router__pb2.InitResponse_Type0.SerializeToString,
        ),
        'routeLog_Type0': grpc.stream_stream_rpc_method_handler(
            servicer.routeLog_Type0,
            request_deserializer=pb_dot_router__pb2.AnalyzerRequest_Type0.FromString,
            response_serializer=pb_dot_router__pb2.AnalyzerResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Router', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Router(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init_Type0(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Router/init_Type0',
                                             pb_dot_router__pb2.InitRequest_Type0.SerializeToString,
                                             pb_dot_router__pb2.InitResponse_Type0.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def routeLog_Type0(request_iterator,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Router/routeLog_Type0',
                                               pb_dot_router__pb2.AnalyzerRequest_Type0.SerializeToString,
                                               pb_dot_router__pb2.AnalyzerResponse.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout,
                                               metadata)
