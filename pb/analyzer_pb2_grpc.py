# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb import analyzer_pb2 as pb_dot_analyzer__pb2


class AnalyzerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.admin_setPromptTmpl = channel.unary_unary(
                '/Analyzer/admin_setPromptTmpl',
                request_serializer=pb_dot_analyzer__pb2.String.SerializeToString,
                response_deserializer=pb_dot_analyzer__pb2.Empty.FromString,
                )
        self.init_type0 = channel.unary_unary(
                '/Analyzer/init_type0',
                request_serializer=pb_dot_analyzer__pb2.InitRequest_Type0.SerializeToString,
                response_deserializer=pb_dot_analyzer__pb2.InitResponse_Type0.FromString,
                )
        self.analyzeLog_Type0 = channel.stream_stream(
                '/Analyzer/analyzeLog_Type0',
                request_serializer=pb_dot_analyzer__pb2.AnalyzerRequest_Type0.SerializeToString,
                response_deserializer=pb_dot_analyzer__pb2.AnalyzerResponse.FromString,
                )


class AnalyzerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def admin_setPromptTmpl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init_type0(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def analyzeLog_Type0(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyzerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'admin_setPromptTmpl': grpc.unary_unary_rpc_method_handler(
                    servicer.admin_setPromptTmpl,
                    request_deserializer=pb_dot_analyzer__pb2.String.FromString,
                    response_serializer=pb_dot_analyzer__pb2.Empty.SerializeToString,
            ),
            'init_type0': grpc.unary_unary_rpc_method_handler(
                    servicer.init_type0,
                    request_deserializer=pb_dot_analyzer__pb2.InitRequest_Type0.FromString,
                    response_serializer=pb_dot_analyzer__pb2.InitResponse_Type0.SerializeToString,
            ),
            'analyzeLog_Type0': grpc.stream_stream_rpc_method_handler(
                    servicer.analyzeLog_Type0,
                    request_deserializer=pb_dot_analyzer__pb2.AnalyzerRequest_Type0.FromString,
                    response_serializer=pb_dot_analyzer__pb2.AnalyzerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Analyzer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analyzer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def admin_setPromptTmpl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Analyzer/admin_setPromptTmpl',
            pb_dot_analyzer__pb2.String.SerializeToString,
            pb_dot_analyzer__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def init_type0(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Analyzer/init_type0',
            pb_dot_analyzer__pb2.InitRequest_Type0.SerializeToString,
            pb_dot_analyzer__pb2.InitResponse_Type0.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def analyzeLog_Type0(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Analyzer/analyzeLog_Type0',
            pb_dot_analyzer__pb2.AnalyzerRequest_Type0.SerializeToString,
            pb_dot_analyzer__pb2.AnalyzerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
