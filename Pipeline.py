def transform_log(service: str, log: str) -> str:
    """
    Transforms a single log string to LLM admissible form
    :param service: log generating service name, should be unique per service instance
     and also contain the service's actual name
    :param log: log generated by `service`, preferably JSON as string
    :return: log formatted as LLM input
    """
    return f'Log <{service}>: {log}'


def transform_query(service: str, query: str) -> str:
    """
    Transforms single query string to LLM admissible form
    :param service: log generating service
    :param query: log generated by `service`, preferably JSON as string
    :return: log formatted as LLM input
    """
    return f'Query <{service}>: {query}'


def transform_logs(service: str, logs: [str]) -> [str]:
    """
    Transforms multiple log strings to LLM admissible form
    :param service: log generating service name, should be unique per service instance
     and also contain the service's actual name
    :param logs: logs generated by `service`, each log preferably JSON as string
    :return: logs formatted as LLM input
    """
    transformed = []
    for log in logs:
        transformed.append(transform_log(service, log))
    return transformed


# change name !!!
class QueryAsker:
    def __init__(self, llm, query_transform_fn):
        self.llm = llm
        self.query_transform_fn = query_transform_fn
        pass

    def query(self, **query_args):
        query = self.query_transform_fn(query_args)
        # do something with query and llm
        pass

