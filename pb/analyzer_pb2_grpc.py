# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb import analyzer_pb2 as pb_dot_analyzer__pb2


class AnalyzerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.analyzeLog = channel.stream_stream(
                '/Analyzer/analyzeLog',
                request_serializer=pb_dot_analyzer__pb2.AnalyzerRequest.SerializeToString,
                response_deserializer=pb_dot_analyzer__pb2.AnalyzerResponse.FromString,
                )
        self.llmPrompt = channel.unary_unary(
                '/Analyzer/llmPrompt',
                request_serializer=pb_dot_analyzer__pb2.Prompt.SerializeToString,
                response_deserializer=pb_dot_analyzer__pb2.Prompt.FromString,
                )


class AnalyzerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def analyzeLog(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def llmPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyzerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'analyzeLog': grpc.stream_stream_rpc_method_handler(
                    servicer.analyzeLog,
                    request_deserializer=pb_dot_analyzer__pb2.AnalyzerRequest.FromString,
                    response_serializer=pb_dot_analyzer__pb2.AnalyzerResponse.SerializeToString,
            ),
            'llmPrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.llmPrompt,
                    request_deserializer=pb_dot_analyzer__pb2.Prompt.FromString,
                    response_serializer=pb_dot_analyzer__pb2.Prompt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Analyzer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analyzer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def analyzeLog(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Analyzer/analyzeLog',
            pb_dot_analyzer__pb2.AnalyzerRequest.SerializeToString,
            pb_dot_analyzer__pb2.AnalyzerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def llmPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Analyzer/llmPrompt',
            pb_dot_analyzer__pb2.Prompt.SerializeToString,
            pb_dot_analyzer__pb2.Prompt.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
